name: Publish to PyPI

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v0.2.8

permissions:
  contents: write  # Required for creating releases
  id-token: write  # Required for trusted publishing (optional but recommended)

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions
    
    - name: Test with tox
      run: tox
      
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.10'
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
        retention-days: 30

  publish:
    needs: test  # Only run if all test jobs pass
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Verify tag version matches setup.py
      run: |
        # Extract version from tag (remove 'v' prefix)
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Tag version: $TAG_VERSION"
        
        # Extract version from setup.py
        SETUP_VERSION=$(python -c "import re; content=open('setup.py').read(); print(re.search(r'version=\"([^\"]+)\"', content).group(1))")
        echo "Setup.py version: $SETUP_VERSION"
        
        # Compare versions
        if [ "$TAG_VERSION" != "$SETUP_VERSION" ]; then
          echo "❌ Version mismatch! Tag: $TAG_VERSION, setup.py: $SETUP_VERSION"
          exit 1
        fi
        echo "✅ Tag version matches setup.py"
    
    - name: Build package
      run: python -m build
    
    - name: Check package contents
      run: |
        echo "📦 Package contents:"
        ls -la dist/
        echo "📋 Package metadata:"
        python -m twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "🚀 Publishing to PyPI..."
        python -m twine upload dist/*
        echo "✅ Successfully published to PyPI!"
    
    - name: Set version for release
      run: |
        # Remove 'v' prefix from tag name for pip install
        VERSION=${GITHUB_REF_NAME#v}
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        body: |
          ## 🎉 Release ${{ github.ref_name }}
          
          This release has been automatically published to PyPI after all tests passed.
          
          **Install with:**
          ```bash
          pip install geofeaturekit==${{ env.PACKAGE_VERSION }}
          ```
          
          **Or upgrade:**
          ```bash
          pip install --upgrade geofeaturekit
          ```
          
          **✅ Tests Status**: All tests passed on Python 3.9, 3.10, 3.11, and 3.12
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 