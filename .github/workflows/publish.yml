name: Publish to PyPI

on:
  workflow_dispatch:  # Manual trigger from GitHub Actions tab
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.8)'
        required: true
        type: string

permissions:
  contents: write  # Required for creating releases
  id-token: write  # Required for trusted publishing (optional but recommended)

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Verify input version matches setup.py
      run: |
        # Get version from workflow input
        INPUT_VERSION="${{ github.event.inputs.version }}"
        echo "Input version: $INPUT_VERSION"
        
        # Extract version from setup.py
        SETUP_VERSION=$(python -c "import re; content=open('setup.py').read(); print(re.search(r'version=\"([^\"]+)\"', content).group(1))")
        echo "Setup.py version: $SETUP_VERSION"
        
        # Compare versions
        if [ "$INPUT_VERSION" != "$SETUP_VERSION" ]; then
          echo "❌ Version mismatch! Input: $INPUT_VERSION, setup.py: $SETUP_VERSION"
          echo "Please update setup.py version to $INPUT_VERSION before releasing"
          exit 1
        fi
        echo "✅ Input version matches setup.py"
    
    - name: Build package
      run: python -m build
    
    - name: Check package contents
      run: |
        echo "📦 Package contents:"
        ls -la dist/
        echo "📋 Package metadata:"
        python -m twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "🚀 Publishing to PyPI..."
        python -m twine upload dist/*
        echo "✅ Successfully published to PyPI!"
    
    - name: Create git tag and GitHub Release
      run: |
        # Set version from input
        VERSION="${{ github.event.inputs.version }}"
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
        
        # Create and push git tag
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin "v$VERSION"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.event.inputs.version }}
        files: dist/*
        generate_release_notes: true
        body: |
          ## 🎉 Release v${{ github.event.inputs.version }}
          
          This release has been automatically published to PyPI.
          
          **Install with:**
          ```bash
          pip install geofeaturekit==${{ github.event.inputs.version }}
          ```
          
          **Or upgrade:**
          ```bash
          pip install --upgrade geofeaturekit
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 